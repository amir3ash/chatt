// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -typed -source=interfaces.go -destination=mock/interfaces.go
//

// Package mock_core is a generated GoMock package.
package mock_core

import (
	core "chat-system/core"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ListMessages mocks base method.
func (m *MockRepository) ListMessages(ctx context.Context, topicID string, p core.Pagination) ([]core.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessages", ctx, topicID, p)
	ret0, _ := ret[0].([]core.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessages indicates an expected call of ListMessages.
func (mr *MockRepositoryMockRecorder) ListMessages(ctx, topicID, p any) *MockRepositoryListMessagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockRepository)(nil).ListMessages), ctx, topicID, p)
	return &MockRepositoryListMessagesCall{Call: call}
}

// MockRepositoryListMessagesCall wrap *gomock.Call
type MockRepositoryListMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryListMessagesCall) Return(arg0 []core.Message, arg1 error) *MockRepositoryListMessagesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryListMessagesCall) Do(f func(context.Context, string, core.Pagination) ([]core.Message, error)) *MockRepositoryListMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryListMessagesCall) DoAndReturn(f func(context.Context, string, core.Pagination) ([]core.Message, error)) *MockRepositoryListMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsgToTopic mocks base method.
func (m *MockRepository) SendMsgToTopic(ctx context.Context, sender core.Sender, topicID, message string) (core.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsgToTopic", ctx, sender, topicID, message)
	ret0, _ := ret[0].(core.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMsgToTopic indicates an expected call of SendMsgToTopic.
func (mr *MockRepositoryMockRecorder) SendMsgToTopic(ctx, sender, topicID, message any) *MockRepositorySendMsgToTopicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsgToTopic", reflect.TypeOf((*MockRepository)(nil).SendMsgToTopic), ctx, sender, topicID, message)
	return &MockRepositorySendMsgToTopicCall{Call: call}
}

// MockRepositorySendMsgToTopicCall wrap *gomock.Call
type MockRepositorySendMsgToTopicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositorySendMsgToTopicCall) Return(arg0 core.Message, arg1 error) *MockRepositorySendMsgToTopicCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositorySendMsgToTopicCall) Do(f func(context.Context, core.Sender, string, string) (core.Message, error)) *MockRepositorySendMsgToTopicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositorySendMsgToTopicCall) DoAndReturn(f func(context.Context, core.Sender, string, string) (core.Message, error)) *MockRepositorySendMsgToTopicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ListMessages mocks base method.
func (m *MockService) ListMessages(ctx context.Context, topicID string, p core.Pagination) ([]core.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessages", ctx, topicID, p)
	ret0, _ := ret[0].([]core.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessages indicates an expected call of ListMessages.
func (mr *MockServiceMockRecorder) ListMessages(ctx, topicID, p any) *MockServiceListMessagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockService)(nil).ListMessages), ctx, topicID, p)
	return &MockServiceListMessagesCall{Call: call}
}

// MockServiceListMessagesCall wrap *gomock.Call
type MockServiceListMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListMessagesCall) Return(arg0 []core.Message, arg1 error) *MockServiceListMessagesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListMessagesCall) Do(f func(context.Context, string, core.Pagination) ([]core.Message, error)) *MockServiceListMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListMessagesCall) DoAndReturn(f func(context.Context, string, core.Pagination) ([]core.Message, error)) *MockServiceListMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMessage mocks base method.
func (m *MockService) SendMessage(ctx context.Context, topicID, message string) (core.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, topicID, message)
	ret0, _ := ret[0].(core.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockServiceMockRecorder) SendMessage(ctx, topicID, message any) *MockServiceSendMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockService)(nil).SendMessage), ctx, topicID, message)
	return &MockServiceSendMessageCall{Call: call}
}

// MockServiceSendMessageCall wrap *gomock.Call
type MockServiceSendMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSendMessageCall) Return(arg0 core.Message, arg1 error) *MockServiceSendMessageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSendMessageCall) Do(f func(context.Context, string, string) (core.Message, error)) *MockServiceSendMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSendMessageCall) DoAndReturn(f func(context.Context, string, string) (core.Message, error)) *MockServiceSendMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAuthZ is a mock of AuthZ interface.
type MockAuthZ struct {
	ctrl     *gomock.Controller
	recorder *MockAuthZMockRecorder
}

// MockAuthZMockRecorder is the mock recorder for MockAuthZ.
type MockAuthZMockRecorder struct {
	mock *MockAuthZ
}

// NewMockAuthZ creates a new mock instance.
func NewMockAuthZ(ctrl *gomock.Controller) *MockAuthZ {
	mock := &MockAuthZ{ctrl: ctrl}
	mock.recorder = &MockAuthZMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthZ) EXPECT() *MockAuthZMockRecorder {
	return m.recorder
}
